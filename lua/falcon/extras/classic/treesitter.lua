local lush = require("lush")
local colours = require('falcon.colours')
local classic = require('falcon.classic')
local base_ui = require('falcon.base_ui')
local styles = require('falcon.styles')

local p = lush(function()
    return {
    -- These are all deprecated, to be replaced below
        TSAnnotation                  {classic.PreProc},
        TSAttribute                   {classic.PreProc},
        TSBoolean                     {classic.Boolean},
        TSCharacter                   {classic.Character},
        TSCharacterSpecial            { } , -- Special characters.
        TSComment                     {classic.Comment},
        TSConditional                 {classic.Conditional},
        TSConstBuiltin                {classic.Boolean},
        TSConstMacro                  {classic.Define},
        TSConstant                    {classic.Constant},
        TSConstructor                 {fg = colours.normal_gray, gui = styles.bold},
        TSDanger                      {},
        TSDebug                       {},
        TSDefine                      {},
        TSEmphasis                    {classic.Italic},
        TSEnvironment                 {},
        TSEnvironmentName             {},
        TSError                       {fg = colours.yellow},
        TSException                   {classic.Keyword},
        TSField                       {classic.Identifier},
        TSFloat                       {classic.Float},
        TSFuncBuiltin                 {classic.Special},
        TSFuncMacro                   {classic.Macro},
        TSFunction                    {classic.Function},
        TSInclude                     {classic.Include},
        TSKeyword                     {classic.Keyword},
        TSKeywordFunction             {fg = colours.tan},
        TSOperator                    {classic.Operator},
        TSKeywordOperator             {TSOperator},
        TSKeywordReturn               {TSOperator},
        TSLabel                       {classic.Label},
        TSLiteral                     {classic.String},
        TSMath                        {},
        TSMethod                      {fg = colours.normal_gray},
        TSNamespace                   {classic.Include},
        TSNone                        {},
        TSNote                        {classic.Todo},
        TSNumber                      {classic.Number},
        TSParameter                   {classic.Identifier},
        TSParameterReference          {TSParameter},
        TSProperty                    {classic.Identifier},
        TSPunctBracket                {classic.Delimiter},
        TSPunctDelimiter              {classic.Delimiter},
        TSPunctSpecial                {classic.Delimiter},
        TSRepeat                      {classic.Repeat},
        TSStrike                      {gui = styles.strikethrough},
        TSString                      {classic.String},
        TSStringEscape                {classic.SpecialChar},
        TSStringRegex                 {classic.String},
        TSStringSpecial               {classic.String},
        TSStrong                      {classic.Bold},
        TSStructure                   {classic.Structure},
        TSSymbol                      {fg = colours.blue_gray},
        TSTag                         {classic.Tag},
        TSTagAttribute                {fg = colours.normal_gray},
        TSTagDelimiter                {classic.Delimiter},
        TSText                        {TSNone},
        TSTextReference               {},
        TSTitle                       {base_ui.Title},
        TSType                        {classic.Type},
        TSTypeBuiltin                 {classic.Type},
        TSURI                         {classic.Underlined},
        TSUnderline                   {gui = styles.underline},
        TSVariable                    {classic.Identifier},
        TSVariableBuiltin             {classic.Special},
        TSWarning                     {fg = colors.mid_yellow},
        sym('@annotation')            {classic.PreProc},
        sym('@attribute')             {classic.PreProc},
        sym('@boolean')               {classic.Boolean},
        sym('@character')             {classic.Character},
        sym('@character.special')     {},
        sym('@comment')               {classic.Comment},
        sym('@conditional')           {classic.Conditional},
        sym('@constant')              {classic.Constant},
        sym('@constant.builtin')      {classic.Boolean},
        sym('@constant.macro')        {classic.Define},
        sym('@constructor')           {fg = colours.normal_gray, gui = styles.bold},
        sym('@emphasis')              {gui = styles.italic},
        sym('@error')                 {fg = colours.yellow},
        sym('@exception')             {classic.Keyword},
        sym('@field')                 {classic.Identifier},
        sym('@float')                 {classic.Float},
        sym('@function')              {classic.Function},
        sym('@function.builtin')      {classic.Special},
        sym('@funciton.macro')        {classic.Macro},
        sym('@include')               {classic.Include},
        sym('@keyword')               {classic.Keyword},
        sym('@keyword.function')      {fg = colours.tan},
        sym('@keyword.operator')      {classic.Operator},
        sym('@keyword.return')        {classic.Operator},
        sym('@label')                 {classic.Label},
        sym('@literal')               {classic.String},
        sym('@namespace')             {classic.Include},
        sym('@note')                  {classic.Todo},
        sym('@number')                {classic.Number},
        sym('@method')                {fg = colours.normal_gray},
        sym('@operator')              {classic.Operator},
        sym('@parameter')             {classic.Identifier},
        sym('@parameter.reference')   {classic.Identifier},
        sym('@property')              {classic.Identifier},
        sym('@punctuation.bracket')   {classic.Delimiter},
        sym('@punctuation.delimiter') {classic.Delimiter},
        sym('@punctuation.special')   {classic.Delimiter},
        sym('@Repeat')                {classic.Repeat},
        sym('@strike')                {gui = styles.strikethrough},
        sym('@string')                {classic.String},
        sym('@string.escape')         {classic.SpecialChar},
        sym('@string.regex')          {classic.String},
        sym('@string.special')        {classic.String},
        sym('@strong')                {gui = styles.bold},
        sym('@structure')             {classic.Structure},
        sym('@symbol')                {fg = colours.blue_gray},
        sym('@tag')                   {classic.Tag},
        sym('@tag.attribute')         {fg = colours.normal_gray},
        sym('@tag.deliimter')         {classic.Delimiter},
        sym('@title')                 {classic.Title},
        sym('@type')                  {classic.Type},
        sym('@type.builtin')          {classic.Type},
        sym('@uri')                   {classic.Underlined},
        sym('@underline')             {gui = styles.underline},
        sym('@variable')              {classic.Identifier},
        sym('@variable.builtin')      {classic.Special},
        sym('@warning')               {fg = colours.mid_yellow},
    }
end)

return p
